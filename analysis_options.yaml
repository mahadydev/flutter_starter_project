# Enterprise-grade analysis options for large-scale Flutter projects
# Recommendations based on Facebook-scale application requirements

# Base configuration extending Flutter's recommended lints
include: package:flutter_lints/flutter.yaml

analyzer:
  # Strong mode configuration for maximum type safety
  language:
    strict-casts: true
    strict-raw-types: true
    strict-inference: true
  
  # Custom error handling and prioritization
  errors:
    # Critical errors that must be addressed - resource leaks, performance issues
    invalid_annotation_target: ignore
    avoid_print: error
    avoid_relative_lib_imports: error
    avoid_returning_null_for_future: error
    avoid_slow_async_io: error
    cancel_subscriptions: error
    close_sinks: error
    missing_required_param: error
    missing_return: error
    must_be_immutable: error
    no_duplicate_case_values: error
    throw_in_finally: error
    unnecessary_statements: error
    unrelated_type_equality_checks: error
    use_build_context_synchronously: error
    valid_regexps: error
    
    # Security-related errors
    unsafe_html: error
    do_not_use_environment: error
    
    # Important warnings requiring attention
    avoid_empty_else: warning
    avoid_type_to_string: warning
    avoid_types_as_parameter_names: warning
    comment_references: warning
    control_flow_in_finally: warning
    empty_statements: warning
    hash_and_equals: warning
    invariant_booleans: warning
    iterable_contains_unrelated_type: warning
    list_remove_unrelated_type: warning
    literal_only_boolean_expressions: warning
    no_adjacent_strings_in_list: warning
    parameter_assignments: warning
    prefer_void_to_null: warning
    
    # State management specific errors
    invalid_use_of_protected_member: error
    
    # Performance optimizations for very large codebases
    unnecessary_null_comparison: error
    dead_code: warning
    
  # Files to exclude from analysis
  exclude:
    # Generated code
    - "**/*.g.dart"
    - "**/*.freezed.dart"
    - "**/*.gr.dart"
    - "**/*.config.dart"
    - "**/*.mocks.dart"
    - "**/*.pb.dart"
    - "**/*.pbenum.dart"
    - "**/*.pbserver.dart"
    - "**/*.pbjson.dart"
    - "**/*.reflectable.dart"
    - "**/*.chopper.dart"
    - "**/*.mapper.dart"
    - "**/*.swagger.dart"
    - "**/*.jserialize.dart"
    - "**/*.gql.dart"
    - "**/*.graphql.dart"
    - "**/*.moor.dart"
    - "**/*.drift.dart"
    - "**/generated/**"
    - "lib/generated_plugin_registrant.dart"
    - "lib/generated/**"
    - "lib/gen/**"
    - "lib/app/generated/**"
    
    # Localization files
    - "lib/l10n/**"
    - "lib/localization/**"
    
    # Build artifacts
    - "bin/cache/**"
    - ".dart_tool/**"
    - "build/**"
    
    # Test files and mocks
    - "test/mock/**"
    - "test/generated/**"
    - "test_driver/**"
    - "integration_test/**"
    
    # Third-party code
    - "third_party/**"
    - "vendor/**"
    
    # Platform-specific code
    - "ios/**"
    - "android/**"
    - "web/**"
    - "windows/**"
    - "macos/**"
    - "linux/**"
        
  # Plugin integration for enterprise-level analysis
  plugins:
    - custom_lint

# Advanced metrics system with quantifiable thresholds
dart_code_metrics:
  anti-patterns:
    - long-method
    - long-parameter-list
    
  metrics:
    # Complexity metrics
    cyclomatic-complexity: 20
    maximum-nesting-level: 5
    number-of-parameters: 5
    source-lines-of-code: 50
    
    # Object-oriented metrics
    number-of-methods: 10
    weight-of-class: 0.33
    maintainability-index: 50
    
  metrics-exclude:
    - "test/**"
    - "integration_test/**"
    - "**/*.g.dart"
    - "**/*.freezed.dart"
    
  rules:
    # Architecture enforcement - critical for large teams
    - layer-rule:
        forbidden-dependencies:
          # Enforce clean architecture boundaries
          - from: "lib/infrastructure/**"
            to: "lib/presentation/**"
          - from: "lib/domain/**" 
            to: "lib/infrastructure/**,lib/presentation/**"
          - from: "lib/presentation/**"
            to: "lib/infrastructure/**"
          - from: "lib/application/**"
            to: "lib/presentation/**"
          - from: "lib/presentation/**"
            to: "lib/application/**"
          # Feature isolation
          - from: "lib/features/*/domain/**"
            to: "lib/features/*/infrastructure/**,lib/features/*/presentation/**"
    
    # Enforce consistent module boundaries
    - dependency-cycles: true
    - prefer-match-file-name: true
    
    # Enforce consistent design patterns
    - prefer-extracting-callbacks: true
    - prefer-const-border-radius: true
    - prefer-single-widget-per-file:
        ignore-private-widgets: true
    
    # Widget performance optimization
    - avoid-nested-conditional-expressions:
        acceptable-level: 2
    - avoid-non-null-assertion: true
    - avoid-unnecessary-setstate: true
    - avoid-wrapping-in-padding: true
    - prefer-extracting-callbacks: true
    - prefer-conditional-expressions: true
    - avoid-returning-widgets:
        ignored-names:
          - buildPage
          - buildPageContent
          - buildContent
    - avoid-unnecessary-widgets: true
    
    # Code organization
    - member-ordering:
        order:
          - public-static-fields
          - private-static-fields
          - public-instance-fields
          - private-instance-fields
          - public-getters-setters
          - private-getters-setters
          - constructors
          - public-methods
          - private-methods
    - arguments-ordering:
        child-last: true
    - newline-before-return: true
    - no-boolean-literal-compare: true
    - prefer-trailing-comma: true
    
    # Enterprise naming conventions
    - ban-name:
        entries:
          - ident: RestApi
            description: "Use HttpClient instead"
          - ident: Todo
            description: "Use Issue instead"
          - ident: test
            description: "Use it/spec instead"
          - ident: impl
            description: "Use implementation instead"
          - ident: utils
            description: "Be more specific with utility class names"
    
    # Resource management
    - avoid-collection-methods-with-unrelated-types: true
    - avoid-unused-parameters: true
    - avoid-unnecessary-type-casts: true
    - avoid-unnecessary-type-assertions: true
    
    # Internationalization
    - prefer-intl-name: true
    - provide-correct-intl-args: true
    
    # Technical debt indicators
    - no-empty-block: true
    - no-equal-then-else: true 
    - double-literal-format: true
    - prefer-first: true
    - prefer-last: true
    - no-magic-number:
        allowed: [0, 1, 2, 3, 4, 5, 8, 10, 16, 24, 32, 60, 64, 90, 100, 200, 300, 400, 500, 1000]
    - avoid-global-state: true
    
    # UI consistency rules for design systems
    - prefer-border-radius-const: true
    - prefer-correct-edge-insets-constructor: true
    - prefer-dedicated-media-query-methods: true
    - prefer-single-widget-per-file:
        ignore-private-widgets: true

# Standard Dart/Flutter linter rules with enterprise customizations
linter:
  rules:
    # === Error Prevention Rules ===
    # Critical rules to prevent runtime errors
    always_use_package_imports: true
    avoid_dynamic_calls: true
    avoid_returning_null_for_future: true
    avoid_slow_async_io: true
    avoid_type_to_string: true
    avoid_types_as_parameter_names: true
    avoid_web_libraries_in_flutter: true
    cancel_subscriptions: true
    close_sinks: true
    collection_methods_unrelated_type: true
    comment_references: true
    discarded_futures: true
    empty_statements: true
    hash_and_equals: true
    invariant_booleans: true
    iterable_contains_unrelated_type: true
    list_remove_unrelated_type: true
    literal_only_boolean_expressions: true
    no_adjacent_strings_in_list: true
    no_duplicate_case_values: true
    no_logic_in_create_state: true
    throw_in_finally: true
    unnecessary_statements: true
    unrelated_type_equality_checks: true
    unsafe_html: true
    valid_regexps: true
    
    # === Code Quality Rules ===
    # Rules for maintainable, readable code
    always_declare_return_types: true
    always_put_control_body_on_new_line: true
    always_put_required_named_parameters_first: true
    always_require_non_null_named_parameters: true
    annotate_overrides: true
    avoid_bool_literals_in_conditional_expressions: true
    avoid_catches_without_on_clauses: true
    avoid_catching_errors: true
    avoid_classes_with_only_static_members: false  # Allow for utility classes
    avoid_double_and_int_checks: true
    avoid_empty_else: true
    avoid_equals_and_hash_code_on_mutable_classes: true
    avoid_escaping_inner_quotes: true
    avoid_field_initializers_in_const_classes: true
    avoid_function_literals_in_foreach_calls: true
    avoid_implementing_value_types: true
    avoid_init_to_null: true
    avoid_multiple_declarations_per_line: true
    avoid_null_checks_in_equality_operators: true
    avoid_positional_boolean_parameters: true
    avoid_print: true
    avoid_private_typedef_functions: true
    avoid_redundant_argument_values: true
    avoid_renaming_method_parameters: true
    avoid_return_types_on_setters: true
    avoid_returning_null: true
    avoid_returning_this: true
    avoid_setters_without_getters: true
    avoid_shadowing_type_parameters: true
    avoid_single_cascade_in_expression_statements: true
    avoid_unnecessary_containers: true
    avoid_unused_constructor_parameters: true
    avoid_void_async: true
    await_only_futures: true
    camel_case_extensions: true
    camel_case_types: true
    cascade_invocations: true
    cast_nullable_to_non_nullable: true
    constant_identifier_names: true
    curly_braces_in_flow_control_structures: true
    deprecated_consistency: true
    directives_ordering: true
    do_not_use_environment: true
    empty_catches: true
    empty_constructor_bodies: true
    eol_at_end_of_file: true
    exhaustive_cases: true
    file_names: true
    implementation_imports: true
    join_return_with_assignment: true
    leading_newlines_in_multiline_strings: true
    library_names: true
    library_prefixes: true
    library_private_types_in_public_api: true
    lines_longer_than_80_chars: false
    missing_whitespace_between_adjacent_strings: true
    no_default_cases: true
    no_leading_underscores_for_library_prefixes: true
    no_leading_underscores_for_local_identifiers: true
    no_runtimeType_toString: true
    non_constant_identifier_names: true
    null_check_on_nullable_type_parameter: true
    null_closures: true
    one_member_abstracts: true
    only_throw_errors: true
    overridden_fields: true
    
    # === Documentation Requirements ===
    # Critical for large team collaboration
    flutter_style_todos: true
    package_api_docs: true  # Mandatory package-level documentation
    
    # === Package and Library Rules ===
    package_names: true
    package_prefixed_library_names: true
    
    # === Style Rules ===
    parameter_assignments: true
    prefer_adjacent_string_concatenation: true
    prefer_asserts_in_initializer_lists: true
    prefer_asserts_with_message: true
    prefer_collection_literals: true
    prefer_conditional_assignment: true
    prefer_const_constructors: true
    prefer_const_constructors_in_immutables: true
    prefer_const_declarations: true
    prefer_const_literals_to_create_immutables: true
    prefer_constructors_over_static_methods: true
    prefer_contains: true
    prefer_equal_for_default_values: true
    prefer_expression_function_bodies: false  # Block bodies for better debugging in large teams
    prefer_final_fields: true
    prefer_final_in_for_each: true
    prefer_final_locals: true
    prefer_for_elements_to_map_fromIterable: true
    prefer_function_declarations_over_variables: true
    prefer_generic_function_type_aliases: true
    prefer_if_elements_to_conditional_expressions: true
    prefer_if_null_operators: true
    prefer_initializing_formals: true
    prefer_inlined_adds: true
    prefer_int_literals: true
    prefer_interpolation_to_compose_strings: true
    prefer_is_empty: true
    prefer_is_not_empty: true
    prefer_is_not_operator: true
    prefer_iterable_whereType: true
    prefer_mixin: true
    prefer_null_aware_method_calls: true
    prefer_null_aware_operators: true
    prefer_relative_imports: false  # Using absolute imports for large projects
    prefer_single_quotes: true
    prefer_spread_collections: true
    prefer_typing_uninitialized_variables: true
    prefer_void_to_null: true
    provide_deprecation_message: true
    
    # === Code Organization Rules ===
    recursive_getters: true
    require_trailing_commas: true
    sized_box_for_whitespace: true
    sized_box_shrink_expand: true
    slash_for_doc_comments: true
    sort_child_properties_last: true
    sort_constructors_first: true
    sort_unnamed_constructors_first: true
    tighten_type_of_initializing_formals: true
    type_annotate_public_apis: true
    type_init_formals: true
    unawaited_futures: true
    
    # === Unnecessary Code Prevention ===
    unnecessary_await_in_return: true
    unnecessary_brace_in_string_interps: true
    unnecessary_const: true
    unnecessary_constructor_name: true
    unnecessary_getters_setters: true
    unnecessary_lambdas: true
    unnecessary_late: true
    unnecessary_new: true
    unnecessary_null_aware_assignments: true
    unnecessary_null_checks: true
    unnecessary_null_in_if_null_operators: true
    unnecessary_nullable_for_final_variable_declarations: true
    unnecessary_overrides: true
    unnecessary_parenthesis: true
    unnecessary_raw_strings: true
    unnecessary_string_escapes: true
    unnecessary_string_interpolations: true
    unnecessary_this: true
    
    # === Flutter-specific Best Practices ===
    use_build_context_synchronously: true
    use_decorated_box: true
    use_full_hex_values_for_flutter_colors: true
    use_function_type_syntax_for_parameters: true
    use_if_null_to_convert_nulls_to_bools: true
    use_is_even_rather_than_modulo: true
    use_key_in_widget_constructors: true
    use_late_for_private_fields_and_variables: true
    use_named_constants: true
    use_raw_strings: true
    use_rethrow_when_possible: true
    use_setters_to_change_properties: true
    use_string_buffers: true
    use_super_parameters: true
    use_test_throws_matchers: true
    void_checks: true

    # === Enterprise-specific Customizations ===
    # Tailored for large teams/projects
    always_specify_types: false  # Let type inference work
    diagnostic_describe_all_properties: false  # Too verbose for large apps
    omit_local_variable_types: false  # Explicit types for better readability
    avoid_final_parameters: false  # Allow final parameters

# Custom lint configuration for organization-specific rules
custom_lint:
  # Add project-specific lints
  rules:
    - avoid_print
    - prefer_single_quotes
    - unnecessary_this
    - prefer_const_constructors
    - prefer_final_locals
    - avoid_web_libraries_in_flutter
    - use_build_context_synchronously
    - require_trailing_commas
    
  # Optional: configure custom rules with arguments
  rule-configs:
    # Add custom rule configurations here
    prefer_match_file_name:
      severity: error


formatter:
  page_width: 80